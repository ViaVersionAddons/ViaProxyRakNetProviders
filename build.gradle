plugins {
    id "java-library"
    id "idea"
    id "net.lenni0451.repackager" version "1.0.0-SNAPSHOT"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    group = project.maven_group ?: rootProject.maven_group
    archivesName = project.maven_name ?: rootProject.maven_name
    version = project.maven_version ?: rootProject.maven_version
}

configurations {
    include
    repackagedInclude

    include.extendsFrom repackagedInclude
    implementation.extendsFrom include
    api.extendsFrom include
}

repositories {
    mavenCentral()
    maven {
        name = "ViaVersion"
        url = "https://repo.viaversion.com"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"

        content {
            includeGroup "com.github.RelativityMC.netty-raknet"
            includeGroup "com.github.telecran-telecrit"
        }
    }
}

dependencies {
    implementation "net.raphimc:ViaProxy:3.4.0-SNAPSHOT"

    include "net.java.dev.jna:jna:5.17.0"

    // For dependency sources, see RakNetBackend class
    include "com.github.RelativityMC.netty-raknet:netty-raknet-client:ae1f415e05"
    include("com.github.telecran-telecrit:JRakNet:d757e139ce") {
        exclude group: "org.apache.logging.log4j"
        exclude group: "io.netty"
    }
    repackagedInclude("dev.kastle.netty:netty-transport-raknet:1.1.0") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("viaproxy.yml") {
        expand "version": project.version
    }
}

jar {
    dependsOn configurations.include
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.include.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }

    from("LICENSE") {
        rename { "${it}_${project.name ?: rootProject.name}" }
    }
}

idea {
    module {
        ["run"].each {
            excludeDirs << file("$it")
        }
    }
}

dependencyRepackager {
    configuration = configurations.repackagedInclude
    relocations = [
            "org.cloudburstmc.netty": "dev.kastle.netty"
    ]
    removeEmptyDirs = true
}

tasks.register("runViaProxy", JavaExec) {
    dependsOn tasks.jar

    mainClass = "net.raphimc.viaproxy.ViaProxy"
    classpath = sourceSets.main.compileClasspath
    workingDir = file("run")
    jvmArgs = ["-DskipUpdateCheck"]

    doFirst {
        def pluginsDir = file("$workingDir/plugins")
        pluginsDir.mkdirs()
        file("$pluginsDir/${project.name}.jar").bytes = tasks.jar.archiveFile.get().asFile.bytes
    }

    doLast {
        file("$workingDir/plugins/${project.name}.jar").delete()
        file("$workingDir/logs").deleteDir()
    }
}
